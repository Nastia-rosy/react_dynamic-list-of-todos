{"version":3,"sources":["api/api.ts","components/User.tsx","components/TodoItem.tsx","components/TodoList.tsx","App.tsx","index.tsx"],"names":["API_URL","User","todo","className","user","name","TodoItem","completed","title","TodoList","todoList","map","key","id","App","useState","sortType","setSortType","todos","setTodos","isLoading","setIsLoading","handleLoadClick","a","fetch","then","response","json","todosFromServer","usersFromServer","todosWithUsers","find","userId","visibleTodos","useMemo","sort","b","localeCompare","getVisibleTodos","length","onClick","type","ReactDOM","render","document","getElementById"],"mappings":"iSAAMA,G,MAAU,wCCeDC,EAPe,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OAC5B,6BACE,0BAAMC,UAAU,kBAAhB,oBACCD,EAAKE,KAAOF,EAAKE,KAAKC,KAAO,KCoBnBC,EAtBmB,SAAC,GAAD,IAAGJ,EAAH,EAAGA,KAAH,OAChC,wBAAIC,UACFD,EAAKK,UACD,2BACA,aAGJ,kBAAC,EAAD,CAAML,KAAMA,IACZ,6BACE,0BAAMC,UAAU,mBAAhB,eAGCD,EAAKM,OAER,yBAAKL,UAAU,eACZD,EAAKK,UACF,OACA,WCTKE,EARmB,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAChC,wBAAIP,UAAU,aACXO,EAASC,KAAI,SAAAT,GAAI,OAChB,kBAAC,EAAD,CAAUA,KAAMA,EAAMU,IAAKV,EAAKW,UC8FvBC,EA9EH,WAAO,IAAD,EACgBC,mBAAS,IADzB,mBACTC,EADS,KACCC,EADD,OAEUF,mBAAkB,IAF5B,mBAETG,EAFS,KAEFC,EAFE,OAGkBJ,oBAAS,GAH3B,mBAGTK,EAHS,KAGEC,EAHF,KAKVC,EAAe,uCAAG,gCAAAC,EAAA,6DACtBF,GAAa,GADS,kBJjBjBG,MAAM,GAAD,OAAIxB,EAAJ,WACTyB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UIgBL,cAIdC,EAJc,gBJZjBJ,MAAM,GAAD,OAAIxB,EAAJ,WACTyB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UIWL,OAKdE,EALc,OAOdC,EAAiBF,EAAgBjB,KAAI,SAAAT,GAAI,kCAC1CA,GAD0C,IAE7CE,KAAMyB,EAAgBE,MAAK,SAAA3B,GAAI,OAAIA,EAAKS,KAAOX,EAAK8B,eAGtDb,EAASW,GAZW,kDAcpBT,GAAa,GAdO,0DAAH,qDAkBfY,EAAeC,mBACnB,kBA5CoB,SAAChB,EAAgBF,GACvC,OAAQA,GACN,IAAK,QACH,OAAO,YAAIE,GAAOiB,MAAK,SAACZ,EAAGa,GAAJ,OAAUb,EAAEf,MAAM6B,cAAcD,EAAE5B,UAE3D,IAAK,WACH,OAAO,YAAIU,GAAOiB,MAAK,SAACZ,EAAGa,GACzB,OAAOb,EAAEnB,MAAQgC,EAAEhC,KACfmB,EAAEnB,KAAKC,KAAKgC,cAAcD,EAAEhC,KAAKC,MACjC,KAGR,IAAK,KACH,OAAO,YAAIa,GAAOiB,MAAK,SAACZ,EAAGa,GAAJ,OAAUb,EAAEV,GAAKuB,EAAEvB,MAE5C,QACE,OAAOK,GA4BHoB,CAAgBpB,EAAOF,KAC7B,CAACA,EAAUE,IAGb,OAAqB,IAAjBA,EAAMqB,OAEN,oCACE,qDACA,4BACEC,QAASlB,EACTmB,KAAK,SACLtC,UAAU,cAEV,uBAAGA,UAAWiB,EAAY,wBAA0B,KAEnDA,EAAY,UAAY,SAO/B,oCACE,qDACA,4BACEqB,KAAK,SACLD,QAAS,kBAAMvB,EAAY,UAC3Bd,UAAU,oBAHZ,iBAQA,4BACEsC,KAAK,SACLD,QAAS,kBAAMvB,EAAY,OAC3Bd,UAAU,eAHZ,cAQA,4BACEsC,KAAK,SACLD,QAAS,kBAAMvB,EAAY,aAC3Bd,UAAU,eAHZ,gBAQA,kBAAC,EAAD,CAAUO,SAAUuB,MChG1BS,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.19b385b4.chunk.js","sourcesContent":["const API_URL = 'https://jsonplaceholder.typicode.com';\n\nexport interface Users {\n  id: number;\n  name: string;\n}\n\nexport interface Todos {\n  id: number;\n  title: string;\n  completed: boolean;\n  userId: number;\n  user?: Users;\n}\n\nexport const getTodos = (): Promise<Todos[]> => {\n  return fetch(`${API_URL}/todos`)\n    .then(response => response.json())\n};\n\nexport const getUsers = (): Promise<Users[]> => {\n  return fetch(`${API_URL}/users`)\n    .then(response => response.json())\n};\n\n\n","import React from 'react';\n\nimport { Todos } from '../api/api';\n\ntype Props = {\n  todo: Todos;\n}\n\nconst User: React.FC<Props> = ({ todo }) => (\n  <div>\n    <span className=\"todo_user-text\">Users name: &nbsp;</span>\n    {todo.user ? todo.user.name : ''}\n  </div>\n);\n\nexport default User;\n","import React from 'react';\nimport User from './User';\n\nimport {Todos} from '../api/api';\n\ntype Props = {\n  todo: Todos;\n}\n\nconst TodoItem: React.FC<Props> = ({ todo }) => (\n  <li className={\n    todo.completed\n      ? 'todo_item todo_item-done'\n      : 'todo_item'\n  }\n  >\n    <User todo={todo} />\n    <div>\n      <span className=\"todo_title-text\">\n        Todos: &nbsp;\n      </span>\n      {todo.title}\n    </div>\n    <div className=\"todo_status\">\n      {todo.completed\n        ? 'True'\n        : 'False'}\n    </div>\n  </li>\n);\n\nexport default TodoItem;\n","import React from 'react';\nimport TodoItem from './TodoItem';\n\nimport { Todos } from '../api/api';\n\ntype Props = {\n  todoList: Todos[];\n}\n\nconst TodoList: React.FC<Props> = ({ todoList }) => (\n  <ul className=\"todo_list\">\n    {todoList.map(todo => (\n      <TodoItem todo={todo} key={todo.id} />\n    ))}\n  </ul>\n);\n\nexport default TodoList;\n","import React, { useState, useMemo } from 'react';\nimport './App.css';\n\nimport { getTodos, getUsers, Todos } from './api/api';\n\nimport TodoList from './components/TodoList';\n\n\nconst getVisibleTodos = (todos: Todos[], sortType: string) => {\n  switch (sortType) {\n    case 'title':\n      return [...todos].sort((a, b) => a.title.localeCompare(b.title));\n\n    case 'userName':\n      return [...todos].sort((a, b) => {\n        return a.user && b.user\n          ? a.user.name.localeCompare(b.user.name)\n          : 0;\n      });\n\n    case 'id':\n      return [...todos].sort((a, b) => a.id - b.id);\n\n    default:\n      return todos;\n  }\n}\n\nconst App = () => {\n  const [sortType, setSortType] = useState('');\n  const [todos, setTodos] = useState<Todos[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleLoadClick = async () => {\n    setIsLoading(true);\n\n    try {\n      const todosFromServer = await getTodos();\n      const usersFromServer = await getUsers();\n\n      const todosWithUsers = todosFromServer.map(todo => ({\n        ...todo,\n        user: usersFromServer.find(user => user.id === todo.userId),\n      }));\n\n      setTodos(todosWithUsers);\n    } catch (e) {\n      setIsLoading(false);\n    }\n  }\n\n  const visibleTodos = useMemo(\n    () => getVisibleTodos(todos, sortType),\n    [sortType, todos]\n  )\n\n  if (todos.length === 0) {\n    return (\n      <>\n        <h1>Dynamic list of todos</h1>\n        <button\n          onClick={handleLoadClick}\n          type=\"button\"\n          className=\"buttonload\"\n        >\n          <i className={isLoading ? \"fa fa-spinner fa-spin\" : \"\"}>\n          </i>\n          {isLoading ? 'Loading' : 'Load'}\n        </button>\n      </>\n    )\n  }\n\n  return (\n    <>\n      <h1>Dynamic list of todos</h1>\n      <button\n        type=\"button\"\n        onClick={() => setSortType('title')}\n        className=\"sort-button left\"\n      >\n        Sort by title\n      </button>\n\n      <button\n        type=\"button\"\n        onClick={() => setSortType('id')}\n        className=\"sort-button\"\n      >\n        Sort by id\n      </button>\n\n      <button\n        type=\"button\"\n        onClick={() => setSortType('userName')}\n        className=\"sort-button\"\n      >\n        Sort by user\n      </button>\n\n      <TodoList todoList={visibleTodos} />\n    </>\n\n  );\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}